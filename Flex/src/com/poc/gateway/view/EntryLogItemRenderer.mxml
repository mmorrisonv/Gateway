<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  creationComplete="group1_creationCompleteHandler(event)"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="30"  height.selected="40"
		  useHandCursor="true" buttonMode="true"
		 autoDrawBackground="false"
		 initialize="">
	<fx:Script>
		<![CDATA[
			import com.poc.gateway.vo.EntryVO;
			
			import mx.events.FlexEvent;
			

			[Bindable]
			private var txtText:String = "";
			public var creationComplete:Boolean = false
			private var _labelText:String;
			
			
			public var help : ItemRendererHelpers = new ItemRendererHelpers(this ) ; 
			[Bindable] public var entry : EntryVO = new EntryVO()
			
			override public function set data(value:Object):void { 
				super.data = value; 
				this.help.listenForObj(value,EntryVO.UPDATED, this.updateItemRenderer )
				
					
				entry = value as EntryVO
				this.help.disableIfNull( value, new EntryVO, 'entry' );  
				//this.help.setupParent( this.owner ) ;
				//this.help.fxSetup( null, null, this.btnDelete  ) ; 
				this.updateItemRenderer()
			} 
			
			public function updateItemRenderer(e:Event=null)  : void
			{
				txtLbl.text = this.entry.cardID + ' - ' + this.entry.person.Name; 
				if (this.selected == false && this.currentState == 'selected' )
					this.currentState = ''; 
				
				if( this.entry.present == true  )
					rectSignedIn.color = 0x567E3A;
				else
					rectSignedIn.color = 0xcccccc;
				//this.entry.success

			}
			

			public function set labelText(string:String):void
			{
				//this.txtText = string;
				this._labelText = string; 
				if ( this.creationComplete == false ) return; 
				//this.lblName.text = string; 
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				this.creationComplete = true
				this.labelText = this._labelText; 
			}
			

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Elastic id="elasticEasing"/>
	</fx:Declarations>
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
		<s:State name="selected"/> 
	</s:states> 
	
	<s:transitions>
		<mx:Transition toState="*" autoReverse="true">
			<s:Parallel>
				<s:Resize target="{this}" duration="300"  />
				<s:AnimateColor targets="{[this.txtLbl,this.bgRectFillColor]}"  duration="400" />
			</s:Parallel>

		</mx:Transition>
	</s:transitions>	
	
	<s:Rect id="bgRect" width="100%" height="100%"
		 >
		<s:fill>
			<s:SolidColor color="0xFFFFFF" id="bgRectFillColor"
						  color.hovered="0xe7e7e7"
						  color.selected="0xeeeeee"/>
		</s:fill>
	</s:Rect>
	
	<s:Group>
		<s:Rect id="bgStatus" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0x567E3A"
							  color.hovered="0xe7e7e7"
							  color.selected="0xeeeeee"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<s:Group width="100%" verticalCenter="0">
		<s:Rect  width="4" height="100%">
			<s:fill>
				<s:SolidColor id="rectRate" color="0x567E3A"/>
			</s:fill>
		</s:Rect>

		<s:Label id="txtLbl" x="5" width="120" maxHeight="28" color="0" fontSize="12" verticalCenter="0"
				 color.hovered="0x545454"
				 color.selected="0" styleName="grayTxt Arial" />
		<s:HGroup right="0" verticalCenter="0" verticalAlign="middle">
			<s:Label styleName="price"  id="txtPrice" text="" paddingTop="8" />

		</s:HGroup>
		
		<s:Rect  width="4" height="100%" right="0">
			<s:fill>
				<s:SolidColor id="rectSignedIn" color="0x567E3A"/>
			</s:fill>
		</s:Rect>
		
	</s:Group>
	
	<s:Line width="100%" bottom="0" right="0" left="0">
		<s:stroke> 
			<s:SolidColorStroke color="0xe9e9e9"/>
		</s:stroke>
	</s:Line>
	
</s:ItemRenderer>
